// Generated from while.g4 by ANTLR 4.6.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 1072, 54993, 33286, 44333, 17431, 44785, 36224, 43741, 2, 25, 144, 8,
	1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9,
	7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4,
	13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18,
	9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9,
	23, 4, 24, 9, 24, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6,
	3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19,
	3, 19, 3, 19, 3, 20, 6, 20, 105, 10, 20, 13, 20, 14, 20, 106, 3, 21, 6,
	21, 110, 10, 21, 13, 21, 14, 21, 111, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 123, 10, 22, 3, 23, 6, 23, 126, 10,
	23, 13, 23, 14, 23, 127, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24,
	136, 10, 24, 12, 24, 14, 24, 139, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	137, 2, 25, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11,
	21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20,
	39, 21, 41, 22, 43, 23, 45, 24, 47, 25, 3, 2, 5, 4, 2, 67, 92, 99, 124,
	3, 2, 50, 59, 5, 2, 11, 12, 15, 15, 34, 34, 148, 2, 3, 3, 2, 2, 2, 2, 5,
	3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13,
	3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2,
	21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2,
	2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2,
	2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2,
	2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 3, 49, 3, 2, 2, 2, 5, 51, 3,
	2, 2, 2, 7, 53, 3, 2, 2, 2, 9, 55, 3, 2, 2, 2, 11, 57, 3, 2, 2, 2, 13,
	59, 3, 2, 2, 2, 15, 61, 3, 2, 2, 2, 17, 64, 3, 2, 2, 2, 19, 67, 3, 2, 2,
	2, 21, 72, 3, 2, 2, 2, 23, 74, 3, 2, 2, 2, 25, 77, 3, 2, 2, 2, 27, 80,
	3, 2, 2, 2, 29, 85, 3, 2, 2, 2, 31, 87, 3, 2, 2, 2, 33, 89, 3, 2, 2, 2,
	35, 94, 3, 2, 2, 2, 37, 100, 3, 2, 2, 2, 39, 104, 3, 2, 2, 2, 41, 109,
	3, 2, 2, 2, 43, 122, 3, 2, 2, 2, 45, 125, 3, 2, 2, 2, 47, 131, 3, 2, 2,
	2, 49, 50, 7, 44, 2, 2, 50, 4, 3, 2, 2, 2, 51, 52, 7, 49, 2, 2, 52, 6,
	3, 2, 2, 2, 53, 54, 7, 45, 2, 2, 54, 8, 3, 2, 2, 2, 55, 56, 7, 47, 2, 2,
	56, 10, 3, 2, 2, 2, 57, 58, 7, 62, 2, 2, 58, 12, 3, 2, 2, 2, 59, 60, 7,
	64, 2, 2, 60, 14, 3, 2, 2, 2, 61, 62, 7, 63, 2, 2, 62, 63, 7, 63, 2, 2,
	63, 16, 3, 2, 2, 2, 64, 65, 7, 35, 2, 2, 65, 66, 7, 63, 2, 2, 66, 18, 3,
	2, 2, 2, 67, 68, 7, 117, 2, 2, 68, 69, 7, 109, 2, 2, 69, 70, 7, 107, 2,
	2, 70, 71, 7, 114, 2, 2, 71, 20, 3, 2, 2, 2, 72, 73, 7, 61, 2, 2, 73, 22,
	3, 2, 2, 2, 74, 75, 7, 60, 2, 2, 75, 76, 7, 63, 2, 2, 76, 24, 3, 2, 2,
	2, 77, 78, 7, 107, 2, 2, 78, 79, 7, 104, 2, 2, 79, 26, 3, 2, 2, 2, 80,
	81, 7, 118, 2, 2, 81, 82, 7, 106, 2, 2, 82, 83, 7, 103, 2, 2, 83, 84, 7,
	112, 2, 2, 84, 28, 3, 2, 2, 2, 85, 86, 7, 125, 2, 2, 86, 30, 3, 2, 2, 2,
	87, 88, 7, 127, 2, 2, 88, 32, 3, 2, 2, 2, 89, 90, 7, 103, 2, 2, 90, 91,
	7, 110, 2, 2, 91, 92, 7, 117, 2, 2, 92, 93, 7, 103, 2, 2, 93, 34, 3, 2,
	2, 2, 94, 95, 7, 121, 2, 2, 95, 96, 7, 106, 2, 2, 96, 97, 7, 107, 2, 2,
	97, 98, 7, 110, 2, 2, 98, 99, 7, 103, 2, 2, 99, 36, 3, 2, 2, 2, 100, 101,
	7, 102, 2, 2, 101, 102, 7, 113, 2, 2, 102, 38, 3, 2, 2, 2, 103, 105, 9,
	2, 2, 2, 104, 103, 3, 2, 2, 2, 105, 106, 3, 2, 2, 2, 106, 104, 3, 2, 2,
	2, 106, 107, 3, 2, 2, 2, 107, 40, 3, 2, 2, 2, 108, 110, 9, 3, 2, 2, 109,
	108, 3, 2, 2, 2, 110, 111, 3, 2, 2, 2, 111, 109, 3, 2, 2, 2, 111, 112,
	3, 2, 2, 2, 112, 42, 3, 2, 2, 2, 113, 114, 7, 118, 2, 2, 114, 115, 7, 116,
	2, 2, 115, 116, 7, 119, 2, 2, 116, 123, 7, 103, 2, 2, 117, 118, 7, 104,
	2, 2, 118, 119, 7, 99, 2, 2, 119, 120, 7, 110, 2, 2, 120, 121, 7, 117,
	2, 2, 121, 123, 7, 103, 2, 2, 122, 113, 3, 2, 2, 2, 122, 117, 3, 2, 2,
	2, 123, 44, 3, 2, 2, 2, 124, 126, 9, 4, 2, 2, 125, 124, 3, 2, 2, 2, 126,
	127, 3, 2, 2, 2, 127, 125, 3, 2, 2, 2, 127, 128, 3, 2, 2, 2, 128, 129,
	3, 2, 2, 2, 129, 130, 8, 23, 2, 2, 130, 46, 3, 2, 2, 2, 131, 132, 7, 49,
	2, 2, 132, 133, 7, 49, 2, 2, 133, 137, 3, 2, 2, 2, 134, 136, 11, 2, 2,
	2, 135, 134, 3, 2, 2, 2, 136, 139, 3, 2, 2, 2, 137, 138, 3, 2, 2, 2, 137,
	135, 3, 2, 2, 2, 138, 140, 3, 2, 2, 2, 139, 137, 3, 2, 2, 2, 140, 141,
	7, 12, 2, 2, 141, 142, 3, 2, 2, 2, 142, 143, 8, 24, 2, 2, 143, 48, 3, 2,
	2, 2, 8, 2, 106, 111, 122, 127, 137, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", "'=='", "'!='", "'skip'",
	"';'", "':='", "'if'", "'then'", "'{'", "'}'", "'else'", "'while'", "'do'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "ID", "INT", "BOOL", "WS", "COMMENT",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"T__17", "ID", "INT", "BOOL", "WS", "COMMENT",
}

type whileLexer struct {
	*antlr.BaseLexer
	modeNames []string
	// TODO: EOF string
}

func NewwhileLexer(input antlr.CharStream) *whileLexer {
	var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}

	l := new(whileLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "while.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// whileLexer tokens.
const (
	whileLexerT__0    = 1
	whileLexerT__1    = 2
	whileLexerT__2    = 3
	whileLexerT__3    = 4
	whileLexerT__4    = 5
	whileLexerT__5    = 6
	whileLexerT__6    = 7
	whileLexerT__7    = 8
	whileLexerT__8    = 9
	whileLexerT__9    = 10
	whileLexerT__10   = 11
	whileLexerT__11   = 12
	whileLexerT__12   = 13
	whileLexerT__13   = 14
	whileLexerT__14   = 15
	whileLexerT__15   = 16
	whileLexerT__16   = 17
	whileLexerT__17   = 18
	whileLexerID      = 19
	whileLexerINT     = 20
	whileLexerBOOL    = 21
	whileLexerWS      = 22
	whileLexerCOMMENT = 23
)
